https://www.jianshu.com/p/4c5c99abb864

1.vue-router是什么
这里的路由就是SPA（单页应用）的路径管理器。再通俗的说，vue-router就是WebApp
的链接路径管理系统。
vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页
面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和
组件映射起来。传统的页面应用，是用一些超链接来实现页面切换和跳转的。在
vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。路由模块的本质
就是建立起url和页面之间的映射关系。

2.vue-router实现原理
SPA(single page application):单一页面应用程序，只有一个完整的页面；它在加
载页面时，不会加载整个页面，而是只更新某个指定的容器中内容。单页面应用(SPA)
的核心之一是: 更新视图而不重新请求页面;vue-router在实现单页面前端路由时，
提供了两种方式：Hash模式和History模式；根据mode参数来决定采用哪一种方式。

1)Hash模式：
vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，
于是当 URL 改变时，页面不会重新加载。 hash（#）是URL 的锚点，代表的是
网页中的一个位置，单单改变#后的部分，浏览器只会滚动到相应位置，不会重新
加载网页，也就是说hash 出现在 URL 中，但不会被包含在 http 请求中，
对后端完全没有影响，因此改变 hash 不会重新加载页面；同时每一次改变#后的部分，
都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置；
所以说Hash模式通过锚点值的改变，根据不同的值，渲染指定DOM位置的不同数据。
hash 模式的原理是 onhashchange 事件(监测hash值变化)，可以在 window 对象
上监听这个事件。
2)History模式：
由于hash模式会在url中自带#，如果不想要很丑的 hash，我们可以用路由的 history
模式，只需要在配置路由规则时，加入"mode: 'history'",这种模式充分利用了
html5 history interface 中新增的 pushState() 和 replaceState() 方法。
这两个方法应用于浏览器记录栈，在当前已有的 back、forward、go 基础之上，
它们提供了对历史记录修改的功能。只是当它们执行修改时，虽然改变了当前的 URL
，但浏览器不会立即向后端发送请求。
不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，
如果后台没有正确的配置，当用户在浏览器直接访问 http://oursite.com/user/id 
就会返回 404，这就不好看了。
所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何
静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。
3)使用路由模块来实现页面跳转的方式
方式1：直接修改地址栏
方式2：this.$router.push(‘路由地址’)
方式3：<router-link to="路由地址"></router-link>

四、vue-router使用方式
1:下载 npm i vue-router -S
2:在main.js中引入 import VueRouter from 'vue-router';
3:安装插件Vue.use(VueRouter);
4:创建路由对象并配置路由规则 let router = new VueRouter({routes:[{path:'/home',component:Home}]});
5:将其路由对象传递给Vue的实例，options中加入 router:router
6:在app.vue中留坑 <router-view></router-view>

具体实现请看如下代码：
//main.js文件中引入
import Vue from 'vue';
import VueRouter from 'vue-router';
//主体
import App from './components/app.vue';
import Home from './components/home.vue'
//安装插件
Vue.use(VueRouter); //挂载属性
//创建路由对象并配置路由规则
let router = new VueRouter({
    routes: [
        //一个个对象
        { path: '/home', component: Home }
    ]
});
//new Vue 启动
new Vue({
    el: '#app',
    //让vue知道我们的路由规则
    router: router, //可以简写router
    render: c => c(App),
})

最后记得在在app.vue中“留坑”
//app.vue中
<template>
    <div>
        <!-- 留坑，非常重要 -->
        <router-view></router-view>
    </div>
</template>
<script>
    export default {
        data(){
            return {}
        }
    }
</script>


五、 vue-router参数传递
1.用name传递参数
在路由文件src/router/index.js里配置name属性
routes: [
    {
      path: '/',
      name: 'Hello',
      component: Hello
    }
]

模板里(src/App.vue)用$route.name来接收 比如：<p>{{ $route.name}}</p>

2 通过<router-link> 标签中的to传参
这种传参方法的基本语法：
<router-link :to="{name:xxx,params:{key:value}}">valueString</router-
link>

比如先在src/App.vue文件中
<router-link :to="{name:'hi1',params:{username:'jspang',id:'555'}}">
Hi页面1</router-link>

然后把src/router/index.js文件里给hi1配置的路由起个name,就叫hi1.
{path:'/hi1',name:'hi1',component:Hi1}

最后在模板里(src/components/Hi1.vue)用$route.params.username进行接收.
{{$route.params.username}}-{{$route.params.id}}

3 利用url传递参数----在配置文件里以冒号的形式设置参数。
我们在/src/router/index.js文件里配置路由
{
    path:'/params/:newsId/:newsTitle',
    component:Params
}

我们需要传递参数是新闻ID（newsId）和新闻标题（newsTitle）.所以我们在路由
配置文件里制定了这两个值。
在src/components目录下建立我们params.vue组件，也可以说是页面。我们在页面
里输出了url传递的的新闻ID和新闻标题。
<template>
    <div>
        <h2>{{ msg }}</h2>
        <p>新闻ID：{{ $route.params.newsId}}</p>
        <p>新闻标题：{{ $route.params.newsTitle}}</p>
    </div>
</template>
<script>
export default {
  name: 'params',
  data () {
    return {
      msg: 'params page'
    }
  }
}
</script>

在App.vue文件里加入我们的<router-view>标签。这时候我们可以直接利用url
传值了
<router-link to="/params/198/jspang website is very good">params
</router-link>
4. 使用path来匹配路由，然后通过query来传递参数
<router-link :to="{ name:'Query',query: { queryId:  status }}" >
     router-link跳转Query
</router-link>

对应路由配置：
   {
     path: '/query',
     name: 'Query',
     component: Query
   }

于是我们可以获取参数：
this.$route.query.queryId

六、vue-router配置子路由(二级路由)
实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL中各段动态
路径也按某种结构对应嵌套的各层组件，例如：
1.首先用<router-link>标签增加了两个新的导航链接
<router-link :to="{name:'HelloWorld'}">主页</router-link>
<router-link :to="{name:'H1'}">H1页面</router-link>
<router-link :to="{name:'H2'}">H2页面</router-link>

2.在HelloWorld.vue加入<router-view>标签，给子模板提供插入位置
 <template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <router-view></router-view>
  </div>
</template>

3.在components目录下新建两个组件模板 H1.vue 和 H2.vue
两者内容类似，以下是H1.vue页面内容：
 <template>
  <div class="hello">
    <h1>{{ msg }}</h1>
  </div>
</template>
<script>
  export default {
    data() {
      return {
        msg: 'I am H1 page,Welcome to H1'
      }
    }
  }
</script>


修改router/index.js代码，子路由的写法是在原有的路由配置下加入children字段。

   routes: [
    {
      path: '/',
      name: 'HelloWorld',
      component: HelloWorld,
      children: [{path: '/h1', name: 'H1', component: H1},//子路由的<router-view>必须在HelloWorld.vue中出现
        {path: '/h2', name: 'H2', component: H2}
      ]
    }
  ]

八.$route 和 $router 的区别
$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，
matched，name 等路由信息参数。
$router 是“路由实例”对象，即使用 new VueRouter创建的实例，包括了路由的
跳转方法，钩子函数等。
$router.push和$router.replace的区别：

使用push方法的跳转会向 history 栈添加一个新的记录，当我们点击浏览器的返回
按钮时可以看到之前的页面。
使用replace方法不会向 history 添加新记录，而是替换掉当前的 history 记录
，即当replace跳转到的网页后，‘后退’按钮不能查看之前的页面。