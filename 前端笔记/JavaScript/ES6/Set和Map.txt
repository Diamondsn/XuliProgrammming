Set
	Set类似于数组，但是成员的值都是唯一的，没有重复的值，因此可以用作数组去重
	可以通过add方法向Set结构加入成员
	eg. 
		const s=new Set()
		[2,3,5,4,5,2,2].forEach(x=>s.add(x));
		for (let i of s){
			console.log(i);
		}
		//2 3 5 4
	
	Set函数可以接受一个数组(或者具有Iterable接口的其他数据结构)作为参数，用来初始化
	//example one
	const set =new Set([1,2,2,3])
	[...set]//[1,2,3]
	
	//example two
	const items=new Set(document.querySelectorAll('div'));
	set.size //56
	
	虽然精确相等运算符认为两个NaN不相等，但是向Set实例添加两个NaN后只会包含一个
	另外，两个对象总是不相等的，即
		let set =new Set()
		set.add({});
		set.add({});
		set.size//2
		
	Set属性和方法
		.size: 返回Set实例的成员总数
		.add(value) 添加某个值，返回Set结构本身
		.delete(value) 删除某个值，返回一个布尔值
		.has(value) 返回一个布尔值
		.clear() 清楚所有成员，没有返回值
		
	Array.from方法可以将Set结构转为数组
	const items=new Set([1,2,3,4,5]);
	const array=Array.from(items);

Map
	JavaScript的对象本质上是键值对的集合(Hash结构)，但是传统上只能通字符串当作键，为了解决这个问题，ES6提供了Map数据结构，它类似于对象，也是键值对的集合，但是键的范围不限于字符串，各种类型的值(包括对象)都可以当作键
	eg.
		const m=new Map();
		const ={p:'Hello World'};
		
		m.set(o,'content');
		m.get(o)//'content'
		
		m.has(o) //true
		m.delete(o)//true
		
	Map也可以接受一个数组作为参数
		const map = new Map([
		  ['name', '张三'],
		  ['title', 'Author']
		]);
		
		map.size // 2
		map.has('name') // true
		map.get('name') // "张三"
		map.has('title') // true
		map.get('title') // "Author"
		
	Map构造函数接受数组作为参数，实际上执行的是下面的算法
		const items = [
		  ['name', '张三'],
		  ['title', 'Author']
		];

		const map = new Map();

		items.forEach(
		  ([key, value]) => map.set(key, value)
		);
	事实上不仅仅是数组，任何具有Iterator接口，且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数，也就是说Set和Map都可以用来生成新的Map
	
	Map转为数组最方便的方法，就是使用扩展运算符(...)
	const myMap = new Map()
	  .set(true, 7)
	  .set({foo: 3}, ['abc']);
	[...myMap]
	// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]