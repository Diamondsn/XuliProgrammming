Async
	async函数返回一个Promise对象，async函数内部return语句返回的值，会成为then方法回调函数的参数
	eg. 
		async function f(){
			return 'hello world';
		}
		f().then(v=>console.log(v));
	async函数内部抛出错误，会导致返回的Promise对象变为reject状态。抛出的错误对象会被catch方法回掉函数接收到
	eg.
		async function f(){
			throw new Error('出错了');
		}
		f().then(
			v=> console.log(v);
			e=> console.log(e);
		)
		//Error: 出错了
	
	async函数返回的Promise对象，必须等到内部所有await命令后面的Promise对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数
	
	await命令
		正常情况下，await命令后面是一个Promise对象，如果不是，会被转成一个立即resolve的Promise对象
		eg. async function f(){
			return await 123;
		}
		f().then(v=>console.log(v));
	
	只要一个await语句后面的Promise变为reject，那么整个async函数都会中断执行
	如果await后面的异步操作出错,那么等同于async函数返回的Promise对象被reject，防止出错的方法，是将其放在try...catch代码块之中
	
	await命令只能用在async函数之中
	
Async函数的实现原理，就是将Generator函数和自动执行器，包装在一个函数里