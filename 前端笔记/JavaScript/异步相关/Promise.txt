三种状态:pending、fulfilled、rejected只有异步操作的结果可以决定当前是哪一种状态
一旦状态改变，就不会再变，任何时候都可以得到这个结果。如果改变已发生，再对promise对象添加回掉函数(then(回掉函数)),也就立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。

then方法
	可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回掉函数时Pormise对象的状态变为rejected时调用。其中第二个函数是可选的。then方法返回的是一个新的Promise实例，因此可以采用链式写法，即then方法后面再调用另一个then方法
catch方法
	该方法只是then方法的一个别名而已，也就是说，这个方法用来注册当promise对象状态变为Rejected时的回掉函数

有时需要将现有对象转化为Promise对象，Promise.resolve方法就起到这个作用,静态方法Promise.resolve(value)可以看做是newPromise()方法的快捷方法
	eg. const jsPromise=Promise.resolve($.ajax('/whatever.json'))
	    //
		Promise.resolve('foo')
		//等价于
		new Promise(resolve=>resolve('foo'))

Promise.reject()方法也会返回一个新的Promise实例，该实例的状态为rejected

为了避免同时使用同步，异步调用可以引起的混乱问题(如果对异步函数进行同步调用的话，处理顺序可能会与预期不符，可能带来意料之外的后果)因此Promise只能使用异步调用方式



使用回调函数的异步处理
----
getAsync('fileA.txt'，function(error,result){
	if(err){
		throw err;
	}
	console.log(result);
});
----


使用Promise进行异步处理
----
var promise=getAsyncPromise('fileA.txt');
promise.then(function(result){
    //
}).catch(function(error){
    //
});

function getAsyncPromise(filename){
	return new Promise(function(resolve,reject){
		getAsync(filename,function(error,result)
			if(error) 
				reject(error);
			else
				resolve(result);
		}
	})
}
----


xhr-promise.js
----
function getURL(url){
	return new Promise(function(resolve,reject){
		var req=new XMLhttpRequest();
		req.open('GET',URL,true);
		req.onreadystatechange=function(){
			if(req.status===200){
				if(req.readyState===4){
					resolve(req.responseText);
				}
			}else{
				reject(new Error(req.statusText));
			}
		};
	});
}

var URL="http://www.baidu.com";
get(URL).then(function onFUlfilled(value){
	console.log(value);
}).catch(function onRejected(error){
	console.log(error);
});
----