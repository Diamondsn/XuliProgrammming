JS第8种数据类型: 大整数BigInt---不受64位双精度浮点数格式的限制。
img-2 一个 WebComponent 组件，使用 < img-2> 取代 < img>，可以只显示第一屏的图片，其他图片通过 Web Worker 预下载，一旦该图片进入可视区域后再加载显示。

Javascript的函数定义有个特点，它会扫描整个函数体的语句，把所有申明的变量"提升"到函数顶部，Javascript引擎自动提升变量的声明，但不会提升变量的赋值

JavaScript全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。当需要从局部函数查找某一种属性或方法时，如果当前作用域没有找到，就会追溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链

JavaScript中的字符串具有不可变性

DOM2级事件规定的事件流包括三个阶段：事件捕获阶段，处于目标阶段和事件冒泡阶段
名称空间
	全局变量会绑定到window上，不同的JavaScript文件如果使用的相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突。解决这个问题的方法是把自己的所有变量或函数全部绑定到一个全局变量中
	
箭头函数
	语法比函数表达式更短，这些函数表达式最适合用于非方法函数，并且他们不能用作构造函数
	1 函数体内的this对象就是父级this，而不是使用时所在的对象
	2 不可以当作构造函数
	3 不可以使用arguments对象，该对象在函数体内不存在，如果要用，可以用rest参数代替

闭包
	闭包是指有权访问另一个函数作用域中变量的函数，建立闭包的最常见的方式就是在一个函数中创建另一个函数，通过另一个函数访问这个函数的局部变量，利用闭包可以突破作用链域
	
This对象的解释
	(1)this总是指向函数的直接调用者/根据上下文对象判断
	(2)如果有new关键字，this指向new出来的那个对象
	(3)在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局的window
	eg. 要保证this指向正确，必须用obj.xxx()的形式调用
	
apply
	要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接受两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数
call 
	与apply类似，唯一的区别是apply()把参数打包成Array再传入，而call()是把参数按顺序传入
	
	对普通函数调用，我们通常把this绑定为null。eg. Math.max.apply(null,[3,5,4]);
	
new操作符具体干了什么
	(1)创建一个新对象
	(2)将构造函数的作用域赋给新对象，因此this就指向了这个新对象
	(3)执行构造函数中的代码，即为新对象添加属性和方法，并继承了原型链
	(4)返回新对象

new与return语句
	默认情况下，函数的返回值为undefined(即没有定义返回值)
	但是构造函数比较例外，new构造函数在没有return的情况下默认返回新建的对象。然而，在有return的情况下，如果返回值为基本数据类型(Numer,Sting,Boolean,Undefinedm,Null),那么返回值依然为新建的对象实例。只有当定义返回一个非基本数据类型的对象时，函数的返回值才为指定的对象，在这种情况下，this值所引用的对象就被丢弃了。

创建对象时：
	构造函数的问题：每个方法都要在实例上重新创建一遍
	原型对象的问题：原型中所有属性是被很多实例共享的，这种共享对于函数非常合适，但是对于包含引用类型值的属性来说，问题就比较突出了，在一个实例上修改该引用类型的值会导致第二个实例也被修改
	一般组合使用构造函数模式和原型模式创建自定义类型，构造函数模式用于定于实例属性，而原型模式用于定义方法和共享的属性

ES6怎么兼容不同浏览器
	使用语法解析工具，把ES6转换为ES5，相当于在ES6和浏览器之间做了一个翻译官。比较通用的工具方案有babel，jsx，traceUR，es6-shim

JS的垃圾回收机制
	机制原理:找出那些不在继续使用的变量然后释放其占用的内存，为此，垃圾收集器会按照固定的时间间隔(或代码执行中预定的收集时间)周期性地执行这一操作
	方法: 1 标记清除
			这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。
		  2 引用计数(跟踪记录每个值被引用的次数)---已不常用，限制:循环引用
	优化内存占用的最佳方式，就是在为执行中的代码只保存必要的数据，一旦数据不再有用，最好通过将其值设为null来释放引用，释放引用(解除引用)并不意味着自动回收该值所占用的内存，而是让值脱离执行环境，以便垃圾收集器下次运行时将其回收

	内存泄漏：不再用到的内存，没有及时释放，就叫内存泄漏。比方说无意中引入的全局变量，闭包中封装的局部变量
	
JS中类型检测的方法
	在五中基本数据类型中typeof()可以检测出Number,String,boolean和undefined，但检测null时会返回Object，同时还可以检测出Object里的function，其他类型的引用对象都会返回Object；
	
	用instanceof只可用来判断Array和Object，返回true和false，Array.isArray()也可用来检测数组，返回true和false
	利用Object.prototype.toString.call()可以用来判定数据具体属于哪种引用类型，更可以判定基本类型是哪种封装类型
		Object.prototype.toString.call([1,2,3])  //[Object Array]
		Object.prototype.toString.call('abc')  //[Object String]
		Object.prototype.toString.call('/\d/')  //[Object RegExp]

Arguments对象不是一个Array,它类似于Array，但除了length属性和索引元素之外之外没有任何Array属性，例如它没有pop()方法。但是它可以被转换为一个真正的Array：var args=Array.prototype.slice.call(arguments);


关于对象的各种方法
	Object.defineProperty(obj,prop,{})
	Object.defineProperties(obj,{})
	Object.getOwnPropertyDescriptor(obj)
	Object.getPrototypeOf(obj)
	hasOwnProperty()
	Object.keys()
	Object.getOwnPropertyNames() //可获得不可枚举的属性名
	
window.onload()和$(documnet).ready()的区别
	前者必须等待网页全部加载完毕(包括图片等)，然后再执行js代码；后者只需要等待网页中的DOM结构加载完毕，就能执行js代码。 前者只能执行一次，如果第二次，那么第一次的执行会被覆盖。后者可以执行多次。
	
代理服务器跨域的原理；
	自己建立一个和客户端域名相同的服务器，在由此服务器和目标服务器之间通信，因为服务器之间通信没有同源策略

严格模式的限制
	变量必须声明后再使用
	函数的参数不能有同名属性，否则报错
	不能使用with语句
	不能对只读属性赋值，否则报错
	不能使用前缀 0 表示八进制数，否则报错
	不能删除不可删除的属性，否则报错
	不能删除变量delete prop，会报错，只能删除属性delete global[prop]
	eval不会在它的外层作用域引入变量
	eval和arguments不能被重新赋值
	arguments不会自动反映函数参数的变化
	不能使用arguments.callee
	不能使用arguments.caller
	禁止this指向全局对象
	不能使用fn.caller和fn.arguments获取函数调用的堆栈
	增加了保留字（比如protected、static和interface）

JS是通过访问BOM对象来访问，控制，修改客户端（浏览器）的，由于BOM的window包含了document，window对象的属性和方法是直接可以使用而被感知的，因此可以直接使用window对象的document属性，通过document属性就可以访问，检索，修改HTML文档内容与结构。因为document对象又是DOM模型的根节点，可以说BOM包好了DOM，浏览器提供出来给与访问的是BOM对象，从BOM对象再访问到DOM对象，从而使js可以操作浏览器以及浏览器读取到的文档。从window.documnet已然可以看出，DOM的最根本的对象是BOM的window对象的子对象,DOM描述了处理网页的方法和接口，BOM描述了与浏览器进行交互的方法和接口

单页应用在实现页面跳转时并不是重新加载一个html文件，而是把当前也面的DOM删除掉，然后用js重新渲染一个新的DOM结构出来。缺点：首屏时间稍慢，因为Vue加载首页时会加载一个html和一个js文件，比单纯多页面加载html要满；SEO差，因为单页应用的页面都是用过js渲染出来，SEO爬虫不认识js。

var isArray = value instanceof Array;
以上代码要返回true，value必须是一个数组，而且还必须与Array构造函数在同个全局作用域中(别忘了，Array是window的属性) 如果value是在另个frame中定义的数组，那么以上代码就返回false。

什么是柯里化？curry的概念很简单，只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。
var add = functioon(x){
	return functioon(y){
		return x + y;
	}
}

三目运算符得嵌套 y=13>12?15:6>7?8:9等价于
if(13>12){
	y=15
}else{
	if(6>7){
		y=8
	}else{
		y=9
	}
}

一个数与自身的取反值相加等于-1，~-3=2;对一个整数连续两次二进制否运算得到它自身，所有的位运算都只对整数有效，二进制运算遇到小数时，会将小数部分去掉，所以对一个小数连续两次二进制否运算等达到取整的效果，且这是所有取整的方法中最快的一种

一个函数的返回结果只依赖于它的参数，并且在执行的过程里面没有副作用，相同的输入总是返回相同的输出，就叫这个函数为纯函数。
