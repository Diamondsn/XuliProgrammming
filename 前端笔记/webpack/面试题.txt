1.什么是打包工具，为什么用打包工具？
它是一种将前端代码进行转换，压缩以及合并等操作的程序工具。目前常见的有grunt，
webpack等。
web前端打包工具，它能将我们前端人员写得less,sass等编译成css.将多个js文件合
并压缩成一个js文件。它的作用就是通过将代码编译、压缩，合并等操作，来减少代码
体积，减少网络请求，以及方便在服务器上运行。目前，会使用web前端打包工具是现
代前端人员必备技能。打包工具在前端单页面中使用的比较多。


2.简单介绍一下webpack？
webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX
）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。直接使用 
require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass）
，但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader
）在默默处理这些事情，这块我们后续会提到。


3.webpack和grunt/gulp的区别?
其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发
流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在
很多场景下可以替代Gulp/Grunt类的工具。

Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，
压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。
Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index
.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它
们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。
如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的
文件。

4.webpack工作原理
（1）读取文件分析模块依赖
（2）对模块进行解析执行(深度遍历)
（3）针对不同的模块使用相应的loader
（4）编译模块，生成抽象语法树AST。
（5）循环遍历AST树，拼接输出js。